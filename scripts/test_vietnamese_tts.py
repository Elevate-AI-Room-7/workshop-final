#!/usr/bin/env python3
"""
Test script for Vietnamese TTS system
Tests various models and configurations with travel-related content
"""

import os
import sys
import time
import traceback
from pathlib import Path

# Add project root to path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

def test_basic_imports():
    """Test if all required modules can be imported"""
    print("üß™ Testing imports...")
    
    try:
        from src.vietnamese_tts_engine import (
            VietnameseTTSEngine, TTSConfig, TTSModel, VietnameseTextProcessor
        )
        print("‚úÖ Vietnamese TTS engine imported successfully")
        return True
    except ImportError as e:
        print(f"‚ùå Failed to import Vietnamese TTS: {e}")
        return False


def test_text_processing():
    """Test Vietnamese text preprocessing"""
    print("\nüîß Testing text processing...")
    
    try:
        from src.vietnamese_tts_engine import VietnameseTextProcessor
        
        processor = VietnameseTextProcessor()
        
        # Test cases for Vietnamese travel content
        test_cases = [
            "Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi TP.HCM! Th·ªùi ti·∫øt h√¥m nay 28¬∞C.",
            "ƒê·∫∑t kh√°ch s·∫°n 5 sao v·ªõi gi√° 1,500,000 VND/ƒë√™m.",
            "Bay t·ª´ H√† N·ªôi ƒë·∫øn ƒê√† N·∫µng ng√†y 25/12/2025.",
            "Thu√™ xe t·ª´ 8:00 AM ƒë·∫øn 6:00 PM v·ªõi t·ªëc ƒë·ªô 60 km/h.",
            "Tham quan H·ªôi An vs Hu·∫ø - so s√°nh 2 di s·∫£n UNESCO."
        ]
        
        for i, text in enumerate(test_cases, 1):
            processed = processor.normalize_text(text)
            print(f"Test {i}:")
            print(f"  Input:  {text}")
            print(f"  Output: {processed}")
            print()
        
        print("‚úÖ Text processing working correctly")
        return True
        
    except Exception as e:
        print(f"‚ùå Text processing failed: {e}")
        traceback.print_exc()
        return False


def test_tts_models():
    """Test TTS model availability and basic functionality"""
    print("\nüé§ Testing TTS models...")
    
    try:
        from src.vietnamese_tts_engine import VietnameseTTSEngine, TTSConfig, TTSModel
        
        # Create engine with test configuration
        config = TTSConfig(
            enable_cache=True,
            cache_dir="test_audio_cache",
            max_cache_size_mb=50,
            gpu_enabled=False  # Use CPU for testing
        )
        
        engine = VietnameseTTSEngine(config)
        print(f"‚úÖ TTS Engine created with device: {engine.device}")
        
        # Test available models
        available_models = engine.get_available_models()
        print(f"üìã Available models: {[model.value for model in available_models]}")
        
        # Test model info
        for model in available_models[:3]:  # Test first 3 models
            info = engine.get_model_info(model)
            print(f"  {model.value}: {info['name']} - {info['quality']} quality")
        
        return True, engine
        
    except Exception as e:
        print(f"‚ùå TTS model test failed: {e}")
        traceback.print_exc()
        return False, None


def test_audio_generation(engine, test_fallback=True):
    """Test audio generation with Vietnamese travel content"""
    print("\nüîä Testing audio generation...")
    
    if not engine:
        print("‚ùå No engine available for testing")
        return False
    
    # Vietnamese travel test phrases
    test_phrases = [
        "Xin ch√†o! T√¥i l√† tr·ª£ l√Ω du l·ªãch th√¥ng minh.",
        "H√† N·ªôi c√≥ nhi·ªÅu ƒë·ªãa ƒëi·ªÉm du l·ªãch n·ªïi ti·∫øng nh∆∞ H·ªì Ho√†n Ki·∫øm.",
        "Th·ªùi ti·∫øt TP.HCM h√¥m nay n·∫Øng ƒë·∫πp, nhi·ªát ƒë·ªô 30 ƒë·ªô C.",
        "ƒê·∫∑t kh√°ch s·∫°n g·∫ßn s√¢n bay v·ªõi gi√° t·ªët nh·∫•t.",
        "Thu√™ xe 4 ch·ªó ƒëi ƒê√† L·∫°t cu·ªëi tu·∫ßn n√†y."
    ]
    
    results = []
    
    for i, phrase in enumerate(test_phrases, 1):
        print(f"\nüß™ Test {i}: {phrase[:30]}...")
        
        try:
            start_time = time.time()
            
            # Try with fallback to gTTS if HuggingFace models fail
            if test_fallback:
                from src.vietnamese_tts_engine import TTSModel
                test_model = TTSModel.GOOGLE_TTS  # Start with gTTS fallback
            else:
                test_model = TTSModel.FACEBOOK_MMS  # Try HuggingFace model
            
            result = engine.generate_speech(phrase, test_model)
            generation_time = time.time() - start_time
            
            print(f"  ‚úÖ Generated in {generation_time:.2f}s")
            print(f"  üìä Model: {result.model_used.value}")
            print(f"  üîä Audio size: {len(result.audio_data)} bytes")
            print(f"  üìà Sample rate: {result.sample_rate} Hz")
            print(f"  üíæ Cache hit: {result.cache_hit}")
            
            results.append({
                'phrase': phrase,
                'success': True,
                'model': result.model_used.value,
                'time': generation_time,
                'size': len(result.audio_data),
                'cache_hit': result.cache_hit
            })
            
        except Exception as e:
            print(f"  ‚ùå Generation failed: {e}")
            results.append({
                'phrase': phrase,
                'success': False,
                'error': str(e)
            })
    
    # Summary
    successful = sum(1 for r in results if r['success'])
    print(f"\nüìä Generation Summary:")
    print(f"  ‚úÖ Successful: {successful}/{len(test_phrases)}")
    
    if successful > 0:
        avg_time = sum(r['time'] for r in results if r['success']) / successful
        print(f"  ‚è±Ô∏è  Average time: {avg_time:.2f}s")
        
        cache_hits = sum(1 for r in results if r['success'] and r.get('cache_hit', False))
        print(f"  üíæ Cache hits: {cache_hits}/{successful}")
    
    return successful > 0


def test_cache_system(engine):
    """Test audio caching functionality"""
    print("\nüíæ Testing cache system...")
    
    if not engine:
        print("‚ùå No engine available for cache testing")
        return False
    
    try:
        # Generate same phrase twice to test caching
        test_phrase = "Ki·ªÉm tra h·ªá th·ªëng cache c·ªßa TTS."
        
        print("First generation (should cache)...")
        start_time = time.time()
        result1 = engine.generate_speech(test_phrase, TTSModel.GOOGLE_TTS)
        time1 = time.time() - start_time
        
        print("Second generation (should hit cache)...")
        start_time = time.time()
        result2 = engine.generate_speech(test_phrase, TTSModel.GOOGLE_TTS)
        time2 = time.time() - start_time
        
        print(f"  First: {time1:.2f}s (cache: {result1.cache_hit})")
        print(f"  Second: {time2:.2f}s (cache: {result2.cache_hit})")
        
        # Check cache stats
        cache_stats = engine.get_cache_stats()
        if cache_stats.get('enabled'):
            print(f"  üìÅ Cache files: {cache_stats['files']}")
            print(f"  üìä Cache size: {cache_stats['size_mb']:.2f} MB")
        
        print("‚úÖ Cache system working")
        return True
        
    except Exception as e:
        print(f"‚ùå Cache test failed: {e}")
        return False


def test_configuration():
    """Test TTS configuration management"""
    print("\n‚öôÔ∏è Testing configuration...")
    
    try:
        from src.config_manager import ConfigManager
        
        config_manager = ConfigManager()
        
        # Test TTS configuration methods
        tts_config = config_manager.get_tts_config_dict()
        print("üìã Current TTS configuration:")
        for key, value in tts_config.items():
            print(f"  {key}: {value}")
        
        # Test updating configuration
        test_updates = {
            'tts_voice_speed': 1.2,
            'tts_audio_quality': 'high',
            'tts_enable_cache': True
        }
        
        success = config_manager.update_tts_config(test_updates)
        print(f"  ‚úÖ Config update: {'SUCCESS' if success else 'FAILED'}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Configuration test failed: {e}")
        return False


def cleanup_test_files():
    """Clean up test files and cache"""
    print("\nüßπ Cleaning up test files...")
    
    try:
        # Remove test cache directory
        test_cache_dir = Path("test_audio_cache")
        if test_cache_dir.exists():
            for file in test_cache_dir.glob("*.wav"):
                file.unlink()
            test_cache_dir.rmdir()
            print("‚úÖ Test cache cleaned up")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Cleanup failed: {e}")
        return False


def main():
    """Run all TTS tests"""
    print("üöÄ Vietnamese TTS System Test Suite")
    print("=" * 50)
    
    test_results = {
        'imports': False,
        'text_processing': False,
        'models': False,
        'audio_generation': False,
        'cache': False,
        'configuration': False
    }
    
    # Test 1: Basic imports
    test_results['imports'] = test_basic_imports()
    
    if not test_results['imports']:
        print("\n‚ùå Cannot proceed without basic imports")
        return
    
    # Test 2: Text processing
    test_results['text_processing'] = test_text_processing()
    
    # Test 3: TTS models
    models_ok, engine = test_tts_models()
    test_results['models'] = models_ok
    
    # Test 4: Audio generation (with fallback to gTTS)
    if engine:
        test_results['audio_generation'] = test_audio_generation(engine, test_fallback=True)
        
        # Test 5: Cache system
        if test_results['audio_generation']:
            test_results['cache'] = test_cache_system(engine)
    
    # Test 6: Configuration
    test_results['configuration'] = test_configuration()
    
    # Cleanup
    cleanup_test_files()
    
    # Final report
    print("\n" + "=" * 50)
    print("üìä TEST RESULTS SUMMARY")
    print("=" * 50)
    
    total_tests = len(test_results)
    passed_tests = sum(test_results.values())
    
    for test_name, result in test_results.items():
        status = "‚úÖ PASS" if result else "‚ùå FAIL"
        print(f"{test_name.replace('_', ' ').title():20} {status}")
    
    print(f"\nOverall: {passed_tests}/{total_tests} tests passed")
    
    if passed_tests == total_tests:
        print("üéâ All tests passed! Vietnamese TTS system is ready.")
    elif passed_tests >= total_tests // 2:
        print("‚ö†Ô∏è  Some tests failed, but basic functionality works.")
    else:
        print("‚ùå Major issues detected. Check dependencies and configuration.")
    
    return passed_tests == total_tests


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)