"""
Simple Car Booking Function Calling for Demo
ƒê∆°n gi·∫£n ch·ªâ ƒë·ªÉ demo t√≠nh nƒÉng function calling c·ªßa LangChain
"""

import re
from typing import Dict, Any, List
from langchain_core.tools import tool


@tool
def extract_car_info(user_input: str) -> Dict[str, Any]:
    """
    Tr√≠ch xu·∫•t th√¥ng tin ƒë·∫∑t xe t·ª´ input c·ªßa user
    
    Args:
        user_input: C√¢u n√≥i c·ªßa ng∆∞·ªùi d√πng
        
    Returns:
        Dict ch·ª©a th√¥ng tin ƒë√£ tr√≠ch xu·∫•t ƒë∆∞·ª£c
    """
    
    # Patterns ƒë∆°n gi·∫£n ƒë·ªÉ tr√≠ch xu·∫•t th√¥ng tin
    info = {}
    text = user_input.lower()
    
    # T√™n kh√°ch h√†ng - C·∫£i thi·ªán pattern matching
    name_patterns = [
        r't√™n (?:kh√°ch h√†ng[:\s]*|t√¥i l√† |c·ªßa t√¥i l√† |)?([A-Z√Ä-·ª∏][a-z√†-·ªπ]+(?: [A-Z√Ä-·ª∏][a-z√†-·ªπ]+)*)',
        r'(?:t√¥i l√† |m√¨nh l√† |t√™n )([A-Z√Ä-·ª∏][a-z√†-·ªπ]+(?: [A-Z√Ä-·ª∏][a-z√†-·ªπ]+)*)',
        r'l√† ([A-Z√Ä-·ª∏][a-z√†-·ªπ]+(?: [A-Z√Ä-·ª∏][a-z√†-·ªπ]+)*)',
        r'^([A-Z√Ä-·ª∏][a-z√†-·ªπ]+(?: [A-Z√Ä-·ª∏][a-z√†-·ªπ]+)*),',  # T√™n ·ªü ƒë·∫ßu c√¢u, k·∫øt th√∫c b·∫±ng d·∫•u ph·∫©y
    ]
    
    for pattern in name_patterns:
        match = re.search(pattern, user_input)
        if match:
            info['name'] = match.group(1)
            break
    
    # S·ªë ƒëi·ªán tho·∫°i - C·∫£i thi·ªán pattern matching
    phone_patterns = [
        r'(?:s·ªë ƒëi·ªán tho·∫°i[:\s]*|sdt[:\s]*|phone[:\s]*)(0\d{8,9})',
        r'(0\d{8,9})',
    ]
    
    for pattern in phone_patterns:
        phone_match = re.search(pattern, user_input.lower())
        if phone_match:
            # L·∫•y group 1 (s·ªë ƒëi·ªán tho·∫°i)
            info['phone'] = phone_match.group(1)
            break
    
    # ƒêi·ªÉm ƒë√≥n - C·∫£i thi·ªán pattern matching
    pickup_patterns = [
        r'ƒëi·ªÉm ƒë√≥n[:\s]*([^,\.]+?)(?:,|$)',  # "ƒêi·ªÉm ƒë√≥n: Bx Mi·ªÅn T√¢y"
        r'(?:t·ª´|ƒë√≥n t·∫°i|pickup) ([^ƒë·∫øn,]+?)(?:\s+ƒë·∫øn|\s+t·ªõi|,|$)',
        r'ƒë√≥n[:\s]*([^,\.]+?)(?:,|$)',
    ]
    
    for pattern in pickup_patterns:
        pickup_match = re.search(pattern, text)
        if pickup_match:
            info['pickup'] = pickup_match.group(1).strip()
            break
    
    # ƒêi·ªÉm ƒë·∫øn - C·∫£i thi·ªán pattern matching  
    dest_patterns = [
        r'ƒëi·ªÉm ƒë·∫øn[:\s]*([^,\.]+?)(?:,|$)',  # "ƒêi·ªÉm ƒë·∫øn: ƒê√† N·∫µng"
        r'(?:ƒë·∫øn|t·ªõi|to) ([^,\.]+)',
        r'ƒë·∫øn[:\s]*([^,\.]+?)(?:,|$)',
    ]
    
    for pattern in dest_patterns:
        dest_match = re.search(pattern, text)
        if dest_match:
            info['destination'] = dest_match.group(1).strip()
            break
    
    # Th·ªùi gian
    time_match = re.search(r'(\d{1,2}:\d{2})', user_input)
    if time_match:
        info['time'] = time_match.group(1)
    elif 'mai' in text:
        info['time'] = 'ng√†y mai'
    elif 'h√¥m nay' in text:
        info['time'] = 'h√¥m nay'
    
    return {
        "extracted_info": info,
        "message": f"ƒê√£ tr√≠ch xu·∫•t ƒë∆∞·ª£c {len(info)} th√¥ng tin"
    }


@tool
def check_booking_complete(booking_info: Dict[str, Any]) -> Dict[str, Any]:
    """
    Ki·ªÉm tra xem th√¥ng tin ƒë·∫∑t xe ƒë√£ ƒë·∫ßy ƒë·ªß ch∆∞a
    
    Args:
        booking_info: Th√¥ng tin ƒë·∫∑t xe hi·ªán t·∫°i
        
    Returns:
        Dict v·ªõi k·∫øt qu·∫£ ki·ªÉm tra v√† c√°c field c√≤n thi·∫øu
    """
    
    required_fields = ['name', 'phone', 'pickup', 'destination']
    missing_fields = []
    
    for field in required_fields:
        if field not in booking_info or not booking_info[field]:
            missing_fields.append(field)
    
    field_names = {
        'name': 'T√™n kh√°ch h√†ng',
        'phone': 'S·ªë ƒëi·ªán tho·∫°i', 
        'pickup': 'ƒêi·ªÉm ƒë√≥n',
        'destination': 'ƒêi·ªÉm ƒë·∫øn'
    }
    
    is_complete = len(missing_fields) == 0
    
    return {
        "is_complete": is_complete,
        "missing_fields": [field_names[field] for field in missing_fields],
        "completion_rate": f"{((4 - len(missing_fields)) / 4) * 100:.0f}%"
    }


@tool
def confirm_booking(booking_info: Dict[str, Any]) -> Dict[str, Any]:
    """
    X√°c nh·∫≠n ƒë·∫∑t xe khi th√¥ng tin ƒë√£ ƒë·∫ßy ƒë·ªß
    
    Args:
        booking_info: Th√¥ng tin ƒë·∫∑t xe ƒë·∫ßy ƒë·ªß
        
    Returns:
        Dict v·ªõi th√¥ng tin x√°c nh·∫≠n
    """
    
    booking_id = f"CAR{hash(str(booking_info)) % 10000:04d}"
    
    confirmation = f"""
üöó **ƒê·∫∂T XE TH√ÄNH C√îNG**

üìã **M√£ ƒë·∫∑t xe:** {booking_id}
üë§ **Kh√°ch h√†ng:** {booking_info.get('name', 'N/A')}
üìû **ƒêi·ªán tho·∫°i:** {booking_info.get('phone', 'N/A')}
üìç **ƒêi·ªÉm ƒë√≥n:** {booking_info.get('pickup', 'N/A')}
üéØ **ƒêi·ªÉm ƒë·∫øn:** {booking_info.get('destination', 'N/A')}
‚è∞ **Th·ªùi gian:** {booking_info.get('time', 'S·ªõm nh·∫•t c√≥ th·ªÉ')}

‚úÖ **Xe s·∫Ω ƒë·∫øn trong 15-20 ph√∫t**
üì± **Li√™n h·ªá t√†i x·∫ø:** 0901234567
"""
    
    return {
        "booking_id": booking_id,
        "confirmation_message": confirmation.strip(),
        "status": "confirmed"
    }


class SimpleCarBooking:
    """
    Class ƒë∆°n gi·∫£n ƒë·ªÉ demo function calling cho ƒë·∫∑t xe
    """
    
    def __init__(self):
        self.current_booking = {}
        self.tools = [extract_car_info, check_booking_complete, confirm_booking]
    
    def process(self, user_input: str) -> Dict[str, Any]:
        """
        X·ª≠ l√Ω input c·ªßa user v√† tr·∫£ v·ªÅ response
        """
        
        # B∆∞·ªõc 1: Tr√≠ch xu·∫•t th√¥ng tin t·ª´ input
        extraction_result = extract_car_info.invoke({"user_input": user_input})
        extracted_info = extraction_result.get("extracted_info", {})
        
        # B∆∞·ªõc 2: C·∫≠p nh·∫≠t th√¥ng tin booking hi·ªán t·∫°i
        self.current_booking.update(extracted_info)
        
        # B∆∞·ªõc 3: Ki·ªÉm tra xem ƒë√£ ƒë·ªß th√¥ng tin ch∆∞a
        check_result = check_booking_complete.invoke({"booking_info": self.current_booking})
        
        if check_result["is_complete"]:
            # B∆∞·ªõc 4: X√°c nh·∫≠n ƒë·∫∑t xe n·∫øu ƒë√£ ƒë·∫ßy ƒë·ªß
            confirmation = confirm_booking.invoke({"booking_info": self.current_booking})
            
            # Reset booking sau khi confirm
            self.current_booking = {}
            
            return {
                "success": True,
                "response": confirmation["confirmation_message"],
                "tool_used": "SIMPLE_CAR_BOOKING",
                "status": "confirmed",
                "booking_id": confirmation["booking_id"]
            }
        else:
            # Y√™u c·∫ßu th√¥ng tin c√≤n thi·∫øu
            missing_fields = check_result["missing_fields"]
            completion_rate = check_result["completion_rate"]
            
            if len(missing_fields) == 1:
                response = f"C·∫£m ∆°n b·∫°n! T√¥i c·∫ßn th√™m th√¥ng tin: **{missing_fields[0]}**"
            else:
                response = f"C·∫£m ∆°n b·∫°n! T√¥i c·∫ßn th√™m th√¥ng tin:\n"
                for i, field in enumerate(missing_fields, 1):
                    response += f"{i}. {field}\n"
            
            response += f"\nüìä Ho√†n th√†nh: {completion_rate}"
            
            return {
                "success": True,
                "response": response,
                "tool_used": "SIMPLE_CAR_BOOKING", 
                "status": "gathering_info",
                "missing_fields": missing_fields,
                "completion_rate": completion_rate,
                "current_info": self.current_booking.copy()
            }