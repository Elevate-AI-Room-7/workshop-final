"""
Travel Assistant using LangChain Function Calling
"""
import os
from typing import Dict, List, Any, Optional
from datetime import datetime

from langchain_openai import AzureChatOpenAI
from langchain_core.messages import HumanMessage, SystemMessage, AIMessage
from langgraph.prebuilt import create_react_agent

from .travel_tools import TRAVEL_TOOLS
from .config_manager import ConfigManager
from .database_manager import DatabaseManager


class TravelAssistantLangChain:
    """
    Travel Assistant using LangChain function calling instead of manual tool detection
    """
    
    def __init__(self, debug_mode: bool = False):
        """
        Initialize Travel Assistant with LangChain agent
        
        Args:
            debug_mode (bool): Enable debug output
        """
        self.debug_mode = debug_mode
        self.config_manager = ConfigManager()
        self.db_manager = DatabaseManager()
        
        # Initialize LLM
        self.llm = self._init_llm()
        
        # Create agent with tools
        self.agent = create_react_agent(
            model=self.llm,
            tools=TRAVEL_TOOLS
        )
        
        # Conversation memory
        self.conversation_history: List[Dict[str, Any]] = []
        
        if self.debug_mode:
            print("‚úÖ TravelAssistantLangChain initialized successfully")
    
    def _init_llm(self) -> AzureChatOpenAI:
        """Initialize Azure OpenAI LLM"""
        try:
            # Get Azure OpenAI configuration
            azure_config = self.config_manager.get_azure_openai_config()
            
            if not azure_config or not all([
                azure_config.get('endpoint'),
                azure_config.get('api_key'),
                azure_config.get('deployment_name')
            ]):
                raise ValueError("Azure OpenAI configuration is incomplete")
            
            llm = AzureChatOpenAI(
                azure_endpoint=azure_config['endpoint'],
                api_key=azure_config['api_key'],
                azure_deployment=azure_config['deployment_name'],
                api_version="2024-07-01-preview",
                temperature=0.7,
                max_tokens=2000
            )
            
            if self.debug_mode:
                print("‚úÖ Azure OpenAI LLM initialized successfully")
            
            return llm
            
        except Exception as e:
            if self.debug_mode:
                print(f"‚ùå Failed to initialize LLM: {str(e)}")
            raise
    
    def process_message(self, user_input: str, conversation_id: Optional[str] = None) -> Dict[str, Any]:
        """
        Process user message using LangChain agent
        
        Args:
            user_input (str): User's input message
            conversation_id (str, optional): Conversation ID for persistence
        
        Returns:
            Dict[str, Any]: Response with message and metadata
        """
        try:
            if self.debug_mode:
                print(f"\nüîÑ Processing message: {user_input}")
            
            # Get conversation context
            context_messages = self._get_conversation_context(conversation_id)
            
            # Create system message with travel assistant instructions
            system_message = self._create_system_message()
            
            # Prepare messages for agent
            messages = [system_message] + context_messages + [HumanMessage(content=user_input)]
            
            # Invoke agent
            response = self.agent.invoke({"messages": messages})
            
            # Extract AI response
            ai_response = response["messages"][-1].content
            
            # Update conversation history
            self._update_conversation_history(user_input, ai_response, conversation_id)
            
            if self.debug_mode:
                print(f"‚úÖ Response generated: {ai_response[:100]}...")
            
            return {
                "response": ai_response,
                "conversation_id": conversation_id,
                "timestamp": datetime.now().isoformat(),
                "tools_used": self._extract_tools_used(response["messages"]),
                "success": True
            }
            
        except Exception as e:
            error_msg = f"‚ùå Xin l·ªói, c√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω y√™u c·∫ßu c·ªßa b·∫°n: {str(e)}"
            
            if self.debug_mode:
                print(f"‚ùå Error processing message: {str(e)}")
            
            return {
                "response": error_msg,
                "conversation_id": conversation_id,
                "timestamp": datetime.now().isoformat(),
                "tools_used": [],
                "success": False,
                "error": str(e)
            }
    
    def _create_system_message(self) -> SystemMessage:
        """Create system message with travel assistant instructions"""
        system_prompt = """
B·∫°n l√† m·ªôt tr·ª£ l√Ω du l·ªãch AI th√¥ng minh v√† th√¢n thi·ªán, chuy√™n h·ªó tr·ª£ ng∆∞·ªùi d√πng Vi·ªát Nam v·ªÅ m·ªçi v·∫•n ƒë·ªÅ li√™n quan ƒë·∫øn du l·ªãch.

**T√çNH C√ÅCH:**
- Th√¢n thi·ªán, nhi·ªát t√¨nh v√† chuy√™n nghi·ªáp
- S·ª≠ d·ª•ng emoji ph√π h·ª£p ƒë·ªÉ t·∫°o c·∫£m gi√°c g·∫ßn g≈©i
- Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát t·ª± nhi√™n v√† d·ªÖ hi·ªÉu
- Lu√¥n cung c·∫•p th√¥ng tin h·ªØu √≠ch v√† th·ª±c t·∫ø

**KH·∫¢ NƒÇNG C·ª¶A B·∫†N:**
üó∫Ô∏è T√¨m ki·∫øm th√¥ng tin du l·ªãch, danh lam th·∫Øng c·∫£nh
üå§Ô∏è Ki·ªÉm tra th·ªùi ti·∫øt hi·ªán t·∫°i v√† d·ª± b√°o
üè® H·ªó tr·ª£ ƒë·∫∑t ph√≤ng kh√°ch s·∫°n
üöó H·ªó tr·ª£ ƒë·∫∑t xe/d·ªãch v·ª• v·∫≠n chuy·ªÉn
üìã T·∫°o k·∫ø ho·∫°ch du l·ªãch chi ti·∫øt
üí¨ Tr√≤ chuy·ªán chung v·ªÅ du l·ªãch

**QUY T·∫ÆC QUAN TR·ªåNG:**
1. Lu√¥n s·ª≠ d·ª•ng c√°c tools c√≥ s·∫µn khi ph√π h·ª£p v·ªõi y√™u c·∫ßu c·ªßa ng∆∞·ªùi d√πng
2. N·∫øu kh√¥ng ch·∫Øc ch·∫Øn v·ªÅ th√¥ng tin, h√£y th√†nh th·∫≠t n√≥i v√† ƒë·ªÅ xu·∫•t c√°ch t√¨m hi·ªÉu th√™m
3. Cung c·∫•p th√¥ng tin chi ti·∫øt v√† h·ªØu √≠ch
4. Lu√¥n k·∫øt th√∫c b·∫±ng c√¢u h·ªèi ƒë·ªÉ ti·∫øp t·ª•c h·ªó tr·ª£ ng∆∞·ªùi d√πng
5. N·∫øu ng∆∞·ªùi d√πng c·∫ßn th√¥ng tin c·∫≠p nh·∫≠t (th·ªùi ti·∫øt, gi√° c·∫£), h√£y s·ª≠ d·ª•ng c√°c tools ƒë·ªÉ l·∫•y th√¥ng tin m·ªõi nh·∫•t

**C√ÅCH S·ª¨ D·ª§NG TOOLS:**
- Khi ng∆∞·ªùi d√πng h·ªèi v·ªÅ ƒë·ªãa ƒëi·ªÉm, danh lam th·∫Øng c·∫£nh ‚Üí d√πng search_travel_information
- Khi h·ªèi v·ªÅ th·ªùi ti·∫øt ‚Üí d√πng get_weather_info
- Khi mu·ªën ƒë·∫∑t ph√≤ng kh√°ch s·∫°n ‚Üí d√πng book_hotel
- Khi mu·ªën ƒë·∫∑t xe ‚Üí d√πng book_car_service
- Khi mu·ªën l√™n k·∫ø ho·∫°ch du l·ªãch ‚Üí d√πng create_travel_plan
- C√¢u ch√†o h·ªèi, c·∫£m ∆°n, c√¢u h·ªèi chung ‚Üí d√πng general_conversation

H√£y lu√¥n t·ª± nhi√™n v√† h·ªØu √≠ch trong m·ªçi t∆∞∆°ng t√°c!
"""
        return SystemMessage(content=system_prompt)
    
    def _get_conversation_context(self, conversation_id: Optional[str]) -> List:
        """Get conversation context from history"""
        if not conversation_id:
            return []
        
        try:
            # Get recent conversation history (last 10 messages)
            history = self.db_manager.get_conversation_history(conversation_id, limit=10)
            
            messages = []
            for record in history:
                messages.append(HumanMessage(content=record['user_message']))
                messages.append(AIMessage(content=record['assistant_response']))
            
            return messages[-10:]  # Keep last 10 messages for context
            
        except Exception as e:
            if self.debug_mode:
                print(f"‚ö†Ô∏è Could not load conversation context: {str(e)}")
            return []
    
    def _update_conversation_history(self, user_input: str, ai_response: str, conversation_id: Optional[str]):
        """Update conversation history in database"""
        try:
            if conversation_id:
                self.db_manager.save_conversation(
                    conversation_id=conversation_id,
                    user_message=user_input,
                    assistant_response=ai_response,
                    timestamp=datetime.now()
                )
            
            # Also keep in memory for current session
            self.conversation_history.append({
                "user_message": user_input,
                "assistant_response": ai_response,
                "timestamp": datetime.now().isoformat()
            })
            
            # Keep only last 20 messages in memory
            if len(self.conversation_history) > 20:
                self.conversation_history = self.conversation_history[-20:]
                
        except Exception as e:
            if self.debug_mode:
                print(f"‚ö†Ô∏è Could not save conversation history: {str(e)}")
    
    def _extract_tools_used(self, messages: List) -> List[str]:
        """Extract tools that were used in the conversation"""
        tools_used = []
        
        for message in messages:
            if hasattr(message, 'additional_kwargs') and 'tool_calls' in message.additional_kwargs:
                for tool_call in message.additional_kwargs['tool_calls']:
                    tool_name = tool_call.get('function', {}).get('name', '')
                    if tool_name and tool_name not in tools_used:
                        tools_used.append(tool_name)
        
        return tools_used
    
    def get_conversation_summary(self, conversation_id: str) -> Dict[str, Any]:
        """Get conversation summary"""
        try:
            history = self.db_manager.get_conversation_history(conversation_id)
            
            if not history:
                return {"summary": "Ch∆∞a c√≥ cu·ªôc h·ªôi tho·∫°i n√†o", "message_count": 0}
            
            return {
                "summary": f"Cu·ªôc h·ªôi tho·∫°i c√≥ {len(history)} tin nh·∫Øn",
                "message_count": len(history),
                "first_message": history[0]['user_message'] if history else None,
                "last_message": history[-1]['user_message'] if history else None
            }
            
        except Exception as e:
            if self.debug_mode:
                print(f"‚ùå Error getting conversation summary: {str(e)}")
            return {"summary": "Kh√¥ng th·ªÉ t·∫£i th√¥ng tin cu·ªôc h·ªôi tho·∫°i", "message_count": 0}
    
    def clear_conversation(self, conversation_id: str) -> bool:
        """Clear conversation history"""
        try:
            self.db_manager.clear_conversation(conversation_id)
            # Also clear from memory
            self.conversation_history = []
            return True
        except Exception as e:
            if self.debug_mode:
                print(f"‚ùå Error clearing conversation: {str(e)}")
            return False
    
    def get_available_tools(self) -> List[Dict[str, str]]:
        """Get list of available tools"""
        return [
            {"name": "search_travel_information", "description": "T√¨m ki·∫øm th√¥ng tin du l·ªãch"},
            {"name": "get_weather_info", "description": "Ki·ªÉm tra th·ªùi ti·∫øt"},
            {"name": "book_hotel", "description": "ƒê·∫∑t ph√≤ng kh√°ch s·∫°n"},
            {"name": "book_car_service", "description": "ƒê·∫∑t xe/v·∫≠n chuy·ªÉn"},
            {"name": "create_travel_plan", "description": "T·∫°o k·∫ø ho·∫°ch du l·ªãch"},
            {"name": "general_conversation", "description": "Tr√≤ chuy·ªán chung"}
        ]